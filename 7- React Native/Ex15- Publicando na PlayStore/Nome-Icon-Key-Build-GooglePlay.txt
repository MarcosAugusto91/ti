Após o projeto criado:

COMANDO INICIAL:
NPX EXPO PREBUILD para realizar um prebuilding do projeto e liberar o diretório nativo ANDROID para nosso projeto
------------------------------------------------------------------------------------------------------------------------------------------------------

ALTERANDO NOME DO APP:
1- Dentro do arquivo app.json os dois primeiros campos são Name e DisplayName que podem ser alterados;
2- Dentro a pasta nativa Android >> app >> src >> main >> res >> values >> strings: alterar o name
------------------------------------------------------------------------------------------------------------------------------------------------------
ALTERANDO LOGO

EXPO:
Para alterar pelo expo basta acessar a pasta assets e trocar os arquivos icons presentes lá;
Porém nós executamos anteriormente o comando NPX EXPO PREBUILD oque nos permitiu acesso a pasta ANDROID, então podemos alterar o logo da mesma forma do CLI abaixo:

CLI:
Para alterar pelo CLI acesse a pasta android >> app >> src >> main >> res >> altere os icones de todas as pastas, há diversos tamanhos de ícones que devem ser criados e colocados em suas respectivas pastas, para que fique com uma boa resolução em todos os dispositivos;
------------------------------------------------------------------------------------------------------------------------------------------------------
GERANDO ARQUIVO PARA PLAYSTORE
Onde encontrar o passo a passo oficial atualizado:
Dentro da documentação do reactNative basta pesquisar por publish

1- Dentro da pasta do nosso projeto executar o seguinte comando:
keytool -genkeypair -v -storetype PKCS12 -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000

2- Após você gerar uma senha e responder um questionário será gerado a key dentro da pasta do projeto com a extensão .keystore

3- Configurando as variáveis: Na pasta android >> gradle >> ARQUIVO: gradle.properties >> Colar no final do arquivo: 
MYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore
MYAPP_UPLOAD_KEY_ALIAS=my-key-alias
MYAPP_UPLOAD_STORE_PASSWORD=*****
MYAPP_UPLOAD_KEY_PASSWORD=*****

4- Agora configure para que o arquivo acesse as informações da variável:
Na pasta: android >> app >> build.gradle vá até signingConfigs e cole dentro abaixo de debug:

release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }

5- Dentro do mesmo arquivo agora dentro de buildTypes/release: cole no INÍCIO:
 signingConfig signingConfigs.release e NÃO fazer por enquanto: retire signingConfig signingConfigs.debug

6- Pegar a keystore gerada e colar na pasta android >> app >> para garantir que irá junto na hora de gerar o arquivo;
7- Pelo Cmd entre na pasta ANDROID: CD ANDROID
8- Execute no cmd: GRADLEW BUNDLERELEASE e aguarde ele criar o arquivo;
9- O arquivo será gerado em: android >> app >> build >> outputs >> bundle >> release >> app.release.aab
10- Caso haja necessidade de gerar uma nova versão basta acessar: android >> app >> src >> ARQUIVO: build.gradle >> buscar os comandos versionCode e versioName e alterar e executar o comando 7 novamente
------------------------------------------------------------------------------------------------------------------------------------------------------
Publicando App -> Vídeo
URL: https://developer.android.com/?hl=pt-br
Mais >> GooglePlay >> Login PlayConsole >> Ao logar o próprio site da Google vai solicitando as informações, inclusive de pagamento (uma única vez) e no final você encaminha seu arquivo .aab (Apk / Build / Release) e publica seu APP na Google Store.